// Some solutions to Fullstack's pre-bootcamp problems. Only included ones that are more than a few lines:
// Feb 2021

// Loops and Debugging - 07 Most Vowels - returns the word from a string that has the most vowels
// At first, started doing a bunch of array methods but it seemed too complicated for a simple operation

const mostVowels = (str) =>{
  str=str.replace('.','') // quick fix; should probably also check for '?','!', etc.
  let maxWord=""
  let maxVowels=0
  str.split(' ').
      map(c=>{
        vowels=0
        for (let i=0; i < c.length; i++){
          if (c[i]==='a' || c[i]==='e' || c[i]==='i' || c[i]==='o' || c[i]==='u') vowels++
        }
        if (vowels > maxVowels){
          maxWord=c;
          maxVowels=vowels;
        }
      })
  return maxWord
}

// Arrays I - 03 My Last Index Of
// finding the last value in an array without using lastIndexOf

const myLastIndexOf =(arr,str,start=arr.length)=>{
  arr = arr.splice(0,start). // adjust the array if there is a starting index
  arr.reverse()              // reverse it
  let x = arr.findIndex(c=>c===str) //find the first
  return x===-1? -1: arr.length - 1 - x  // return
}

// Arrays II - Even and Odds
// return all evens in an array and then all odds in an array
// would be more efficient to do a forEach and loop through the array once and create two arrays

const evenAndOdd=(arr)=>{
   return [arr.filter(c=>c%2===0),arr.filter(c=>c%2===1)]
}

//Arrays II - Make Grid
//Write a function makeGrid that accepts two arguments:
//numColumns (number), numRows (number)
//makeGrid should return a two-dimensional array that represents a grid of the given dimensions.
// I struggle with two dimensional arrays so including some of these here

const makeGrid =(cols,rows)=>{
  let res=new Array(rows)
  for (let r=0; r < rows; r++){
    res[r]=new Array(cols)
    for (let c=0; c <cols; c++){
      res[r][c]=c+1
    }
  }
  return res
}

//Arrays II - remove columns
//Write a function removeColumns that accepts two arguments//
//originalGrid (two-dimensional array), numColums (number)
//removeColumns should return a new grid with the correct number of columns removed.

const removeColumns=(grid,col)=>{
  for (let i=0; i < grid.length; i++){
    for (let j=0; j < col; j++){
      grid[i].pop()
    }
  }
  return grid
}

//Arrays II - mySlice
// Basically creating the mySlice functionality without using it
// Tricky mainly because the possible negative starting and ending indexes
//Define a function, mySlice, that accepts up to three arguments:
//originalArray, startIdx (number, optional), endIdx (number, optional)

const mySlice=(arr,start=0,end=arr.length)=>{
  let res=[]
  if (start < 0) start=arr.length+start;
  if (end < 0) end=arr.length+start-1;
  for (let i=start; i < end; i++){
    res.push(arr[i])
  }
  return res
}

// Objects - compare objects (completed three different ways)
const compareObjects=(obj1,obj2)=>{
// method 1 - JSON stringify
//  if (JSON.stringify(obj1) !== JSON.stringify(obj2)) return false;
//  return true
  
// method 2 - compare key/values to each other
//  let obj1Ent = Object.entries(obj1).sort((a,b)=> a-b)
//  let obj2Ent = Object.entries(obj2).sort((a,b)=> a-b)
//  if (obj1Ent.length !== obj2Ent.length) return false;
//  for (let i=0; i < obj1Ent.length; i++){
//    if (obj1Ent[i][0] !== obj2Ent[i][0] || obj1Ent[i][1]!==obj2Ent[i][1]) 
//      return false
//  }
//  return true
  
// method 3 - loop through each and ensure the same keys and values
  for (let key in obj1){
    if (!(key in obj2 && obj1[key] === obj2[key])) return false
  }
  for (let key in obj2){
    if (!(key in obj1 && obj2[key] === obj1[key])) return false
  }
  return true
}

// Objects - 03 Leet translator
// one liner but kept as I don't do these a lot
// Translate the passed string to Leet using the translation 

let letters = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' ];
let leetChars = ['@', '8', '(', '|)', '3', 'ph', 'g', '#','l', '_|', '|<', '1', "|'|'|", '/\/', '0', '|D', '(,)', '|2', '5', '+', '|_|', '|/', "|/|/'",'><', 'j', '2'];

const leetTranslator = (str) =>{
  return str.toLowerCase().
             split('').
             map(z=>leetChars[letters.findIndex(c=>c===z)]).
             join('')
}

// Objects - 04 Pet Sounds
// short but kept to show an array of objects
//

let animalNoises = [
  { 'dog': {
    'America' : 'Woof! Woof!',
    'Germany' : 'Wau Wau!',
    'England' : 'Bow wow!',
    'Uruguay' : 'Jua jua!',
    'Afrikaans' : 'Blaf!',
    'Korea' : 'Mong mong!',
    'Iceland' : 'Voff voff!',
    'Albania' : 'Ham!',
    'Algeria' : 'Ouaf ouaf!'
    }
  },
  { 'cat': {
    'America' : 'Meow',
    'Germany' : 'Miauw!',
    'England' : 'mew mew',
    'Uruguay' : 'Miau Miau!',
    'Afrikaans' : 'Purr',
    'Korea' : 'Nyaong!',
    'Iceland' : 'Kurnau!',
    'Albania' : 'Miau',
    'Algeria' : 'Miaou!'
    }
  },
  { 'chicken': {
    'America' : 'Cluck cluck',
    'Germany' : 'tock tock tock',
    'England' : 'Cluck Cluck',
    'Uruguay' : 'gut gut gdak',
    'Afrikaans' : 'kukeleku',
    'Korea' : 'ko-ko-ko',
    'Iceland' : 'Chuck-chuck!',
    'Albania' : 'Kotkot',
    'Algeria' : 'Cotcotcodet'
    }
  }
];

const petSounds = (name, country) =>{
  let idx = animalNoises.findIndex(c =>{
    return name in c
  })
  let thisAnimal=animalNoises[idx]
  return `${name[0].toUpperCase()}${name.slice(1)}s in ${country} say ${thisAnimal[name][country]}`
}

// Objects - 06 Frequency Analysis
// count the letters in the string

const frequencyAnalysis = (str) =>{
  const letters = {
    'a':0,'b':0,'c':0,'d':0,'e':0,
    'f':0,'g':0,'h':0,'i':0,'j':0,
    'k':0,'l':0,'m':0,'n':0,'o':0,
    'p':0,'q':0,'r':0,'s':0,'t':0,
    'u':0,'v':0,'w':0,'x':0,'y':0,
    'z':0
  }
  for (c of str){
    letters[c]++
  }
  console.log(letters)
  return letters
}

// Objects - 07 Attendance Check
// Produce a list of those present on the given day
// classRoom is an array of objects with an array of days - -tough to navigate through

let classRoom = [
    {
        "Marnie" : [
                {"Monday" : true},
                {"Tuesday" : true},
                {"Wednesday" : true},
                {"Thursday" : true},
                {"Friday" : true}
            ]
    },
    {
        "Lena" : [
                {"Monday" : false},
                {"Tuesday" : false},
                {"Wednesday" : true},
                {"Thursday" : false},
                {"Friday" : true}
            ]
    },
    {
        "Shoshanna" : [
                {"Monday" : true},
                {"Tuesday" : true},
                {"Wednesday" : false},
                {"Thursday" : true},
                {"Friday" : false}
            ]
    },
    {
        "Jessa" : [
                {"Monday" : false},
                {"Tuesday" : false},
                {"Wednesday" : false},
                {"Thursday" : false},
                {"Friday" : true}
            ]
    }
];

// YOUR CODE BELOW
const attendanceCheck=(day)=>{
  let res=[]
  
  for (let i=0; i < classRoom.length; i++){
    let ent=classRoom[i]
    let key=Object.keys(ent)
    for (let j= 0; j < ent[key].length; j++){
         if (ent[key][j][day]) res.push(key.join(''))
    }
  }
  return res
}

// Object methods
// 03 Call them all 
// calls methods in an object - check that it is a function first

const callThemAll = (obj, val) =>{
  let res=[]
  for (x in obj){
    if (typeof obj[x] === "function"){
      res.push(obj[x](val))
      }
  }
  return res
}

// 05 Taco Cat Inc
// methods to record a sale object and return inventory - iterating through objects

let tacoCatInc = {
  gourmetShell: {
    'hard treat shell': {cost: 2, quantity: 100},
    'soft treat shell': {cost: 1.5, quantity: 100}
  },

  gourmetFishFilling: {
    'salmon': {cost: 5, quantity: 100},
    'tuna': {cost: 5.5, quantity: 100},
    'sardines': {cost: 1.5, quantity: 100}
  },

  gourmetVeggie: {
    'cat grass': {cost: 1, quantity: 100}
  },

  gourmetSeasoning: {
    'cat nip': {cost: 0.5, quantity: 100},
    'treat dust': {cost: 0.1, quantity: 100}
  },

  cash: 0,

// YOUR CODE BELOW
  currentInventory: function() {
    let invAmt=0
    for (let foodType in tacoCatInc){
      if (typeof tacoCatInc[foodType] === 'object'){
        for (let menuItem in tacoCatInc[foodType]){
          invAmt += tacoCatInc[foodType][menuItem].cost * tacoCatInc[foodType][menuItem].quantity
        }
      }
    }
    return invAmt
  },
  
  sale: function(order){
    let orderTot = 0
    for (const [key, value] of Object.entries(order)) {
      orderTot += tacoCatInc[key][value].cost;
      tacoCatInc[key][value].quantity--;
    }
    this.cash += orderTot
    return orderTot
  }
};
